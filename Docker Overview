# Docker позволяет избавиться от проблем с кучей зависимостей, когда одно приложение требует определенную версию ОС и библиотек, а другое приложение
# соответственно другую ОС и другие версии билиотек
# контейнер - изолированное окружение со своими собственными процессами и сервисами, сетевыми интерфейсами, точками монтирования, за исключением того, 
# что все контейнеры используют одно ядро ОС
# Docker использует LXC контейнеры на low-level

# ОС состоит из ядра и установленного софта
# ядро ОС отвечает за взаимодействие с железом
# в то время как ядро остается постоянным, установленный поверх софт делает дистрибутив ОС уникальным (Ubuntu, CentOS и т.д.)
# т.к. все контейнеры используют одно ядро ОС, то мы например можем запустить на хосте с Ubuntu контейнеры с CentOS, Fedora
# таким образом контейнеры отличаются друг от друга набором софта, в то время как ядро Linux не меняется
# важно, из-за описанной выше архитектуры мы не можем запустить контейнер с Windows на хосте с ядром Linux
# для этих целей нам подойдет Docker установленный на Windows Server

# можно установить Docker на Windows и запустить контейнер на Linux, но фактически это будет запущенная на Windows ВМ с Linux и уже на ней будет
# запущен контейнер с Linux

# в этом состоит основное отличие Docker от систем виртуализации, которые позволяют запускать на одном железе разные ОС с разными ядрами (Windows, Linux)
# Docker в свою очередь служит для упаковки, контейнеризации и доставки приложений

# в случае Docker: Hardware => OS => Docker => Container (внутри которого библиотеки, зависимости и приложение)
# в случае виртуализации: Hardware => Hypervisor => VM (внутри полноценная ОС, на которую установлены зависимости, библиотеки и приложение)
# соответственно VM потребляют больше ресурсов, чем контейнеры
# контейнеры быстрее загружаются, т.к. там нет этапа загрузки ОС
# важно отметить, что в среде контейнеров, работающих на одном ядре, меньше изоляции,  чем у ВМ с собственными ОС
# в случае виртуализации мы можем запускать linux-baser и windows-based приложения на одном гипервизоре

# в production environment как правило объединяются преимущества виртуализации и контейнеризации
# в итоге: Hardware => Hypervisor => VM (внутри полноценная ОС, на которой установлен Docker, на котором в свою очередь запущены контейнеры)

# docker image - образ (аналог template ВМ), из которого создаются контейнеры
# docker container - запущенный изолированный экземпляр образа со своими собственными процессами

# существует две редакции Docker - Community Edition и Enterprise Edition
