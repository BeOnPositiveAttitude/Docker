docker run nginx   #скачает image из Docker Hub и запустит контейнер
docker run -d --name hello hello-world   #запуск контейнера с указанием определенного имени hello из определенного образа hello-world
docker ps   #смотреть список запущенных контейнеров
docker ps -a   #смотреть список всех контейнеров, в том числе остановленных
docker ps -qa   #вывести только id-шники контейнеров
docker stop container_name   #остановить контейнер
docker rm container_name   #удалить контейнер
docker rm $(docker ps -qa)   #удалить все контейнеры, q=quiet - only display container IDs
docker rmi $(docker images -q)   #удалить все образы
docker image prune -a   #удалить неиспользуемые никакими контейнерами образы
docker system prune   #удалить все неиспользуемые контейнеры, образы, сети и кэш

docker images   #смотреть список образов
docker rmi nginx   #удалить образ, перед удалением важно убедиться что нет запущенных с этого образа контейнеров
docker pull nginx   #только скачать образ, не запуская контейнер

docker run ubuntu   #запустит контейнер и тут же остановит его
# это происходит из-за того, что контейнер не предназначен для запуска операционных систем
# контейнер предназначен для запуска определенного процесса или сервиса, например веб-сервера, сервера приложений или БД 
# как только процесс завершен контейнер останавливается 
# контейнер живет только пока живет процесс внутри него
# если веб-сервис внутри контейнера остановился или упал, контейнер останавливается
# Ubuntu это только образ ОС, который используется в качестве базового для запуска других приложений
# внутри него нет процессов или приложений запущенных по умолчанию
# если образ не запускает каких-либо сервисов, как в случае с Ubuntu мы можем дать инструкцию Docker запустить какой-либо процесс с помощью docker run:
docker run ubuntu sleep 100

# если нужно запустить команду внутри контейнера мы можем использовать exec:
docker exec container_name cat /etc/hosts
docker exec container_id cat /etc/*release*
docker exec -it container_id bash   #подключиться к терминалу бегущего контейнера

# по умолчанию контейнер запускается в attached-mode, т.е. консоль занимается output-ом контейнера
docker run -d kodekloud/simple-webapp   #запустить контейнер в detached-mode, чтобы контейнер бежал в background и консоль была свободна
docker attach container_id   #вернуться обратно в attached-mode контейнера

docker run centos   #скачает образ из официального docker registry
docker run frenzy88/myimage   #если нужно скачать с репозитория пользователя
docker run -it centos bash   #i=interactive - keep STDIN open even if not attached, t=tty - allocate a pseudo-TTY
docker run --rm nginx   #удалит контейнер сразу после его остановки, не нужно отдельно вводить docker rm container_id

docker cp /tmp/nautilus.txt.gpg container_id:/tmp/   #скопировать файл с docker-хоста в контейнер

docker commit ubuntu_latest media:devops   #создать образ с названием media:devops из запущенного контейнера ubuntu_latest

docker inspect -f '{{.State.Pid}}' container_id   #вывести определенное поле, а именно PID-процесса контейнера

docker buildx build --push --tag $IMAGE_NAME:$IMAGE_TAG .   #build и push одной ккомандой
docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest   #alias для docker image tag
docker push $IMAGE_NAME:latest
