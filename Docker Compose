# если нам нужно запустить сразу несколько контейнеров, из которых строится наш итоговый сервис, на помощь приходит Docker Compose
# вместо множества команд:

docker run frenzy88/simple-webapp
docker run mongodb
docker run redis:alpine
docker run ansible

# мы можем написать docker-compose.yml:

services:
     web:
        image: "frenzy88/simple-webapp"
     database:
        image: "mongodb"
     messaging:
        image: "redis:alpine"
     orchestration:
        image: "ansible"
 
 docker compose up   #поднять контейнеры из yml-файла
 # контейнеры поднимаются на одном docker-хосте
 
 # link - опция командной строки для связи двух контейнеров друг с другом
 
docker run -d --name=redis redis
docker run -d --name=db postgres
docker run -d --name=vote -p 5000:80 --link redis:redis voting-app   #первый redis - имя контейнера, второй redis - имя хоста redis в коде voting-app
docker run -d --name=result -p 5001:80 --link db:db result-app
docker run -d --name=worker --link db:db --link redis:redis worker

# при создании линка фактически в файле /etc/hosts контейнера vote создается запись:
172.17.0.2 redis 89cd8eb563da

# если перевести записи выше в Docker Compose:

redis:
  image: redis
db:
  image: postgres:9.4
vote:
  image: voting-app
  ports:
    - 5000:80
  links:
    - redis
result:
  image: result-app
  ports:
    - 5001:80
  links:
    - db   #здесь db=db:db
worker:
  image: worker
  links:
    - redis
    - db

# в случае если нам нужно сначала собрать свои образы мы можем вместо опции image указать опцию build:

redis:
  image: redis
db:
  image: postgres:9.4
vote:
  build: ./vote   #папка с кодом приложения и Dockerfile-ом
  ports:
    - 5000:80
  links:
    - redis
result:
  build: ./result
  ports:
    - 5001:80
  links:
    - db
worker:
  build: ./worker
  links:
    - redis
    - db
    
# существуют различные версии Docker Compose файлов со своими особенностями и ограничениями
# так например в version: 1 нельзя было указать другую сеть для контейнера кроме как дефолтную bridged или определить порядок старта контейнеров
# в version: 1 для сети использовались link-и для связи контейнеров в рамках дефолтной bridged-сети
# в version: 2 появилось слово services в начале файла
# при использовании version: 2 и выше необходимо указывать версию в самом начале файла, перед словом services

version: 2
services:
    redis:
        image: redis
    db:
        image: postgres:9.4
    vote:
        image: voting-app
        ports:
          - 5000:80
        
# в version: 2 для каждого приложения создается своя выделенная bridged-сеть и все контейнеры приложения маппятся к ней
# затем контейнеры взаимодействуют друг с другом на основе service name друг друга
# таким образом в version: 2 нет необходимости использовать link-и
# также в version: 2 добавили порядок старта контейнеров:

version: 2
services:
    redis:
        image: redis
    db:
        image: postgres:9.4
    vote:
        image: voting-app
        ports:
          - 5000:80
        depends_on:
          - redis   #контейнер vote запустится только после старта redis
          
# version: 3 поддерживает Docker Swarm

# предположим, что мы решили разделить сети на front-end (vote и result) и back-end (redis, db, worker)

version: 2
services:
    redis:
        image: redis
        networks:
            - back-end
    db:
        image: postgres:9.4
        networks:
            - back-end
    vote:
        image: voting-app
        networks:
            - front-end
            - back-end
    result:
        image: result
        networks:
            - front-end
            - back-end
        
networks:
    front-end:
    back-end:
