# рассмотрим ситуацию, когда нам нужно масштабировать наше приложение, запустить много контейнеров на разных Docker-хостах
# в этом случае необходимо мониторить нагрузку на контейнеры и добавлять новые при необходимости
# если какой-либо из контейнеров упал, нужно поднять его заново
# а что если упал сам Docker-хост? тогда и все контейнеры на нем тоже упадут
# понадобится выделенный инженер, который будет мониторить все эти контейнеры, перезапускать их, добавлять новые и т.д.
# но если контейнеров сотни и тысячи, это уже нерациональный подход
# можно конечно написать свои собственные скрипты для управления контейнерами

# на помощь нам приходят системы оркестрации контейнерами
# системы оркестрации контейнерами - это набор инструментов и скриптов для управления контейнерам в prod средах
# типичная система оркестрации состоит из нескольких Docker-хостов, которые могут обслуживать контейнеры
# даже если какой-либо контейнер упал, наше приложение все равно будет доступно через другие рабочие контейнеры

docker service create --replicas=100 nodejs   #команда Docker Swarm 

# системы оркестрации помогают нам автоматически увеличить число контейнеров при повышении нагрузки на приложение
# и наоборот уменьшить число контейнеров при уменьшении нагрузки со стороны пользователей
# системы оркестрации также помогают добавлять новые Docker-хосты при необходимости
# и поддерживают advanced networking между контейнерами на разных хостах, балансировку нагрузки, shared storage между хостами
# существует несколько систем оркестрации - Docker Swarm, Kubernetes, MESOS
