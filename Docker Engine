# когда мы установили Docker на наш хост, фактически мы установили три разных компонента: Docker Daemon, REST API Server и Docker CLI
# Docker Daemon управляет такими объектами как imаges, containers, volumes, networks 
# Docker REST API Server представляет собой API-интерфейс, с помощью которого программы взаимодействуют с Docker Daemon
# Docker CLI - интерфейс командной строки, с помощью которого мы создаем, удаляем контейнеры и образы и т.д. 
# CLI взаимодействует с Daemon через REST API
# Docker CLI может находиться на другом хосте отличном от Docker Host 
docker -H=10.123.2.1:2375 run nginx   #с помощью опции -H мы указываем адрес удаленного Docker Engine и порт

# Docker использует следующие namespace-ы для изоляции: Process ID, Network, Mount, InterProcess, Unix Timesharing
# рассмотрим Namespace Process ID:
# когда загружается ОС Linux, сначала стартует один корневой процесс с PID 1, от него уже запускаются остальные процессы
# процессы уникальны и два процесса не могут иметь одинаковые PID
# когда мы создаем контейнер это похоже на дочернюю ОС, которая должна думать, что располагает собственным набором процессов, начиная с корневого с PID 1
# но как мы знаем не существует жесткой изоляции между контейнерами и Docker Host-ом
# фактически процессы запущенные в контейнере - это процессы запущенные на Docker Host-е
# два процесс не могут иметь PID 1, и тут на помощь приходит namespace PID, в этом случае процесс может быть ассоциирован с несколькими Process ID
# когда процесс запускается в контейнере, фактически это запускается другой процесс на Docker Host-е и он получает следующий доступный Process ID хоста
# то есть в контейнере это может быть PID 1, а фактически на докер хосте это может быть например PID 5
# например если мы запустили в контейнере сервис nginx у него будет определенный PID
# при этом на докер хосте этот же сервис nginx будет иметь другой PID
# таким образом процессы контейнеров запускаются на одном и том же докер хосте, но при этом запускаются в своих собственных namespace-ах

# каким образом ресурсы хоста (cpu, ram) распределяются между хостом и контейнерами?
# по умолчанию нет ограничений на использование ресурсов хоста каким-либо контейнером и один контейнер может утилизировать все ресурсы хоста
