# при установке Docker создает структуру папок в /var/lib/docker, в которой хранятся файлы контейнеров, образов, вольюмов и т.д.
# каждая строка в Dockerfile - это новый слой в image
# рассмотрим два докер-файла:

FROM ubuntu
RUN apt-get update && apt-get -y install python
RUN pip install flask flask-mysql
COPY . /opt/source-code
ENTRYPOINT FLASK_APP=/opt/source-code/app.py flask run

docker build Dockerfile -t frenzy88/my-custom-app

##########

FROM ubuntu
RUN apt-get update && apt-get -y install python
RUN pip install flask flask-mysql
COPY app2.py /opt/source-code
ENTRYPOINT FLASK_APP=/opt/source-code/app2.py flask run

docker build Dockerfile2 -t frenzy88/my-custom-app-2

# при билде второго образа Docker не будет заново создавать первые три слоя, т.к. они одинаковые для обоих образов (и уже были собраны для первого образа)
# он возьмет данные о первых трех слоях из кеша и начнет пересобирать только последние два слоя
# таким образом Docker собирает образы быстрее и эффективнее сохраняет дисковое пространство
# также это полезно, когда мы часто меняем source code нашего приложения, образ не ребилдится с нуля, таким образом экономит нам кучу времени
# после завершения сборки образа мы уже не сможем изменить содержимое какого-либо слоя в образе, они будут read-only
# поменять содержимое какого-либо слоя возможно только путем сборки нового образа

# после запуска контейнера Docker создает новый доступный для записи слой на самом верхнем уровне образа
# этот созданный слой нужен для хранения логов приложения, временных файлов контейнера или файлов созданных юзером в контейнере
# этот слой живет только пока запущен контейнер, как только контейнер удаляется исчезает и этот временный слой
# важно помнить, что один и тот же образ может быть использован для запуска нескольких контейнеров
# можно условно разделить контейнер на Image Layer (read-only) и Container Layer (read-write)
# код в файле app.py является в нашем случае частью Image Layer (read-only) 
# если мы захотим поменять код в файле app.py уже после запуска контейнера, то перед сохранением изменений Docker создаст копию этого файла 
# в Container Layer (read-write), при этом файл app.py в Image Layer останется неизменным
# этот механизм называется copy-on-write

# если же мы хотим сохранить данные из Container Layer даже после остановки контейнера, необходимо добавить persistent volume
docker volume create data_volume   #создаст папку data_volume в /var/lib/docker/volumes/
# затем мы можем примонтировать созданный volume к Container Layer при запуске контейнера:
docker run -v data_volume:/var/lib/mysql mysql
# если запустить команду docker run -v data_volume2:/var/lib/mysql mysql без предварительного создания volume, то Docker создаст его автоматически
# это называется volume mounting

# если же нам требуется использовать для монтирования не дефолтную папку /var/lib/docker/volumes, а например /data
# то при запуске контейнера мы указываем полный путь к этой папке на docker-хосте:
docker run -v /data/mysql:/var/lib/mysql mysql
# это называется bind mounting

# монтирование volume через опцию -v считается устаревшим
# более современный подход использует опцию --mount:
docker run --mount type=bind,source=/data/mysql,target=/var/lib/mysql mysql   #source - папка на докер-хосте, target - папка в контейнере

# Docker использует storage drivers для многослойной архитектуры:
# AUFS, ZFS, BTRFS, Device Mapper, Overlay, Overlay 2
# выбор конкретного драйвера зависит от ОС докер-хоста, например для Ubuntu это AUFS, который недоступен например на CentOS
# Docker автоматически выбирает наиболее подходящий для ОС драйвер
# разные storage drivers выдают разную производительность и стабильность работы, так что мы можем выбрать подходящий под наши нужды


